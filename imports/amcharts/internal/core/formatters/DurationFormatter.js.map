{"version":3,"file":"DurationFormatter.js","sourceRoot":"","sources":["../../../../../src/.internal/core/formatters/DurationFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Duration formatting functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n * @todo Implement syntax to set base unit in format itself\r\n */\r\nexport class DurationFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * A base value for negative numbers. Will treat all numbers below this value\r\n\t * as negative numbers.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _negativeBase: number = 0;\r\n\r\n\t/**\r\n\t * Holds number format.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _durationFormat = \"mm:ss\";\r\n\r\n\t/**\r\n\t * A base unit to consider values are in.\r\n\t *\r\n\t * @default \"s\"\r\n\t * @type {string}\r\n\t */\r\n\tprotected _baseUnit = \"s\";\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t * @type {string}\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\r\n\t/**\r\n\t * How many milliseconds each unit represents.\r\n\t *\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _unitValues: { [index: string]: number } = {\r\n\t\t\"S\": 1,\r\n\t\t\"s\": 1000,\r\n\t\t\"m\": 60000,\r\n\t\t\"h\": 3600000,\r\n\t\t\"d\": 86400000,\r\n\t\t\"w\": 604800000,\r\n\t\t\"M\": 2592000000,\r\n\t\t\"y\": 31536000000,\r\n\t};\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t *\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t *\r\n\t * @type {Optional<Sprite>}\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t *\r\n\t * @type {Optional<Language>}\r\n\t */\r\n\tpublic language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number according as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n\t * @param  {number | string}  value   Value to format\r\n\t * @param  {string}           format  Format to apply\r\n\t * @param  {string}           base    Override base unit\r\n\t * @return {string}                   Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: string): string {\r\n\r\n\t\t// no language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tformat = this._durationFormat;\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this._negativeBase) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this._negativeBase) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tif (this._outputFormat === \"svg\") {\r\n\t\t\t\tformatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n\t\t\t}\r\n\t\t\telse if (this._outputFormat === \"html\") {\r\n\t\t\t\tformatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param  {string}  format  Format string, i.e. \"#,###.00\"\r\n\t * @param  {string}  base    Override base unit\r\n\t * @return {any}             Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: string): any {\r\n\r\n\t\t// check cache\r\n\t\tif (typeof (this.getCache(format)) !== \"undefined\") {\r\n\t\t\treturn this.getCache(format);\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\tif (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t\tinfo[part] = this.getCache(item.source);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\tif (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t\tchunk.text = this._durationFormat;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (!$type.hasValue(matches[x])) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\tthis.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param  {number}  value    Value\r\n\t * @param  {any}     details  Parsed format as returned by {parseFormat}\r\n\t * @return {string}           Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative: boolean = !details.absolute && (value < this._negativeBase);\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp: number = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res: string = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0; i < details.parts.length; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part: string = details.parts[i];\r\n\t\t\tlet unit: string = part.substr(0, 1);\r\n\t\t\tlet digits: number = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints: number = Math.floor(tstamp / this._unitValues[unit]);\r\n\t\t\tres = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._unitValues[unit];\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param  {number}  value     A source value\r\n\t * @param  {string}  baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return {number}            Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: string): number {\r\n\t\treturn value * this._unitValues[baseUnit];\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the parent [[Sprite]] object.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Duration format.\r\n\t *\r\n\t * @default \"mm:ss\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n\t * @param {string}  format  Duration format\r\n\t */\r\n\tpublic set durationFormat(format: string) {\r\n\t\tthis._durationFormat = format;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format\r\n\t */\r\n\tpublic get durationFormat(): string {\r\n\t\treturn this._durationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Base unit the values are in.\r\n\t *\r\n\t * A base unit will be used to recalculate the numeric value to millisecond\r\n\t * timestamps.\r\n\t *\r\n\t * Available options:\r\n\t *\r\n\t * * \"q\" - millisecond\r\n\t * * \"s\" - second\r\n\t * * \"i\" - minute\r\n\t * * \"h\" - hour\r\n\t * * \"d\" - day\r\n\t * * \"w\" - week\r\n\t * * \"m\" - month\r\n\t * * \"y\" - year\r\n\t *\r\n\t * @default \"s\"\r\n\t * @param {string}  baseUnit  A base unit\r\n\t */\r\n\tpublic set baseUnit(baseUnit: string) {\r\n\t\tthis._baseUnit = baseUnit.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Base unit\r\n\t */\r\n\tpublic get baseUnit(): string {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Setter for output format: \"svg\" or \"html.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {string}  value  Output format\r\n\t */\r\n\tpublic set outputFormat(outputFormat: string) {\r\n\t\tthis._outputFormat = outputFormat.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Getter for output format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Output format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n"]}