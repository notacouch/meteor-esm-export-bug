{"version":3,"file":"Label.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Label.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Text class deals with all text placed on chart.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { DataItem } from \"../DataItem\";\r\nimport { TextValign } from \"../defs/TextValign\";\r\nimport { TextAlign } from \"../defs/TextAlign\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { AMElement } from \"../rendering/AMElement\";\r\nimport { Group } from \"../rendering/Group\";\r\nimport { registry } from \"../Registry\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { MultiDisposer } from \"../utils/Disposer\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n\r\n\r\n/**\r\n * Defines properties for [[Text]].\r\n */\r\nexport interface ILabelProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Horizontal align of the text.\r\n\t *\r\n\t * @default \"start\"\r\n\t * @type {TextAlign}\r\n\t */\r\n\ttextAlign?: TextAlign;\r\n\r\n\t/**\r\n\t * Vertical align of the text.\r\n\t *\r\n\t * @default \"top\"\r\n\t * @type {TextValign}\r\n\t */\r\n\ttextValign?: TextValign;\r\n\r\n\t/**\r\n\t * A plain text content.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttext?: string;\r\n\r\n\t/**\r\n\t * Should the lines wrap if they do not fit into max width?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\twrap?: boolean;\r\n\r\n\t/**\r\n\t * Should the text be selectable>\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tselectable?: boolean;\r\n\r\n\t/**\r\n\t * HTML content.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thtml?: string;\r\n\r\n\t/**\r\n\t * Should the lines be truncated (optionally with ellipsis) if they do not\r\n\t * fit into max width?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\ttruncate?: boolean;\r\n\r\n\t/**\r\n\t * If `truncate` is enabled, should Label try to break only on full words\r\n\t * (`true`), or whenever needed, including middle of the word. (`false`)\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWords?: boolean;\r\n\r\n\t/**\r\n\t * If lines are truncated, this ellipsis will be added at the end.\r\n\t *\r\n\t * @default \"...\"\r\n\t * @type {string}\r\n\t */\r\n\tellipsis?: string;\r\n\r\n\t/**\r\n\t * Hide text of it does not fit into element's dimensions?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\thideOversized?: boolean;\r\n}\r\n\r\n/**\r\n * Text line information.\r\n *\r\n * Objects used to hold cached information about lines in a Text element.\r\n */\r\nexport interface ITextLineInfo {\r\n\r\n\t/**\r\n\t * Measurements for the bounding box of the line.\r\n\t *\r\n\t * @type {SVGRect}\r\n\t */\r\n\t\"bbox\"?: SVGRect,\r\n\r\n\t/**\r\n\t * A reference to an SVG `<g>` element that holds line elements.\r\n\t *\r\n\t * @type {Group}\r\n\t */\r\n\t\"element\"?: Group,\r\n\r\n\t/**\r\n\t * Indicates if line contains more than one element, e.g. has multiple\r\n\t * formatted blocks.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\t\"complex\"?: boolean\r\n\r\n};\r\n\r\n/**\r\n * Defines events for [[Text]].\r\n */\r\nexport interface ILabelEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Adapters for [[Text]].\r\n *\r\n * Includes both the [[Adapter]] definitions and properties.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelAdapters extends IContainerAdapters, ILabelProperties {\r\n\r\n\t/**\r\n\t * Applied to the final formatted label text.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\ttextOutput: string;\r\n\r\n\t/**\r\n\t * Applied to the final formatted label HTML.\r\n\t * \r\n\t * @type {string}\r\n\t */\r\n\thtmlOutput: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Text is used to display highly configurable, data-enabled textual elements.\r\n *\r\n * ## Data Binding\r\n *\r\n * A Text element can dynamically parse and populate its contents with values\r\n * from a [[DataItem]].\r\n *\r\n * To activate such binding, set element's `dataItem` property.\r\n *\r\n * When activated, text contents will be parsed for special tags, e.g.:\r\n *\r\n * ```TypeScript\r\n * label.dataItem = myDataItem;\r\n * label.text = \"The title is: {title}\";\r\n * ```\r\n * ```JavaScript\r\n * label.dataItem = myDataItem;\r\n * label.text = \"The title is: {title}\";\r\n * ```\r\n *\r\n * The above will automatically replace \"{title}\" in the string with the\r\n * actual data value from `myDataItem`.\r\n *\r\n * Note, that most often dataItem is set by the Component.\r\n *\r\n *\r\n * @see {@link ILabelEvents} for a list of available events\r\n * @see {@link ILabelAdapters} for a list of available Adapters\r\n * @todo Vertical align\r\n * @todo Linkage to relative documentation (formatters, data binding)\r\n * @important\r\n */\r\nexport class Label extends Container {\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILabelProperties}\r\n\t */\r\n\tpublic _properties!: ILabelProperties;\r\n\r\n\t/**\r\n\t * Defines Adapter type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILabelAdapters}\r\n\t */\r\n\tpublic _adapter!: ILabelAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILabelEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILabelEvents;\r\n\r\n\t/**\r\n\t * Indicates if the whole text does not fit into max dimenstions set for it.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic isOversized: boolean = false;\r\n\r\n\t/**\r\n\t * Currently formatted text, read only.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic currentText: string;\r\n\r\n\t/**\r\n\t * Current format to be used for outputing text.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _currentFormat: string;\r\n\r\n\t/**\r\n\t * [_sourceDataItemEvents description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MultiDisposer}\r\n\t */\r\n\tprotected _sourceDataItemEvents: MultiDisposer;\r\n\r\n\r\n\tprotected _prevStatus: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Execute super's constructor\r\n\t\tsuper();\r\n\r\n\t\t// Set this class name\r\n\t\tthis.className = \"Label\";\r\n\r\n\t\tthis.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\t// not good to set this, as then these will appear on each label and values set on container won't be applied.\r\n\t\t//this.textDecoration = \"none\";\r\n\t\t//this.fontWeight = \"normal\";\r\n\r\n\r\n\t\t// Set defaults\r\n\t\tthis.wrap = false;\r\n\t\tthis.truncate = false;\r\n\t\tthis.fullWords = true;\r\n\t\tthis.ellipsis = \"...\";\r\n\t\tthis.textAlign = \"start\";\r\n\t\tthis.textValign = \"top\";\r\n\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\tthis.renderingFrequency = 1;\r\n\r\n\t\t// Set up adapters for manipulating accessibility\r\n\t\tthis.adapter.add(\"readerTitle\", (arg) => {\r\n\t\t\tif (!arg) {\r\n\r\n\t\t\t\targ = this.populateString(\r\n\t\t\t\t\t$utils.plainText(\r\n\t\t\t\t\t\t$utils.isNotEmpty(this.html)\r\n\t\t\t\t\t\t\t? this.html\r\n\t\t\t\t\t\t\t: this.text\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\t\t\treturn arg;\r\n\t\t});\r\n\r\n\t\t// Add events to watch for maxWidth/maxHeight changes so that we can\r\n\t\t// invalidate this\r\n\t\tthis.events.on(\"maxsizechanged\", (ev) => {\r\n\t\t\tif (\r\n\t\t\t\t(this.bbox.width > this.availableWidth)\r\n\t\t\t\t|| ((this.bbox.width < this.availableWidth) && this.isOversized)\r\n\t\t\t\t|| (this.bbox.height > this.availableHeight)\r\n\t\t\t\t|| ((this.bbox.height < this.availableHeight) && this.isOversized)\r\n\t\t\t) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.alignSVGText();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Aply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [arrange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic arrange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates current text according to data item and supported features.\r\n\t * Returns `true` if current text has changed.\r\n\t *\r\n\t * @return {boolean} Text changed?\r\n\t */\r\n\tprotected updateCurrentText(): boolean {\r\n\t\t// Determine output format\r\n\t\tlet output: string, text: string;\r\n\r\n\t\tif ($utils.isNotEmpty(this.html) && this.paper.supportsForeignObject()) {\r\n\r\n\t\t\t// We favor HTML text if it's set and browser supports `foreignObject`\r\n\t\t\toutput = \"html\";\r\n\t\t\ttext = this.html;\r\n\t\t}\r\n\t\telse {\r\n\t\t\toutput = \"svg\";\r\n\t\t\ttext = this.text;\r\n\t\t}\r\n\r\n\t\t// Need to format text all the time\r\n\t\tif ($type.hasValue(text) && text !== \"\") {\r\n\t\t\ttext = this.populateString(text, this.dataItem);\r\n\t\t}\r\n\r\n\t\tif (output == \"html\") {\r\n\t\t\ttext = this.adapter.apply(\"htmlOutput\", text);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttext = this.adapter.apply(\"textOutput\", text);\r\n\t\t}\r\n\r\n\t\t// Update the text\r\n\t\tlet changed = text != this.currentText || output != this._currentFormat;\r\n\t\tthis.currentText = text;\r\n\t\tthis._currentFormat = output;\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the textual label.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\r\n\t\t// Draw super\r\n\t\tsuper.draw();\r\n\r\n\t\tlet topParent = this.topParent;\r\n\t\tif (topParent) {\r\n\t\t\tif (!topParent.maxWidth || !topParent.maxHeight) {\r\n\t\t\t\ttopParent.events.once(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis._prevStatus = \"\";\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t})\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate max width and height\r\n\t\tlet maxWidth: number = $math.max(this.availableWidth - this.pixelPaddingLeft - this.pixelPaddingRight, 0);\r\n\t\tlet maxHeight: number = $math.max(this.availableHeight - this.pixelPaddingTop - this.pixelPaddingBottom, 0);\r\n\r\n\t\t// save\r\n\t\tlet status = maxHeight + \",\" + maxWidth + this.wrap + this.truncate + this.fullWords + this.rtl + this.ellipsis;\r\n\r\n\t\t// Update text\r\n\t\tif (!this.updateCurrentText() && this.inited && this._prevStatus == status) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._measuredWidth = 0;\r\n\t\tthis._measuredHeight = 0;\r\n\r\n\t\t// Reset\r\n\t\tthis.isOversized = false;\r\n\r\n\t\t// Determine output format\r\n\t\tlet output = this._currentFormat;\r\n\t\tlet text = this.currentText;\r\n\r\n\t\t// Empty string\r\n\t\tif (!$type.hasValue(text) || text == \"\") {\r\n\t\t\tthis.element.attr({ display: \"none\" });\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Chop up text into lines\r\n\t\t// We're still processing SVG and HTML in the same way for now\r\n\t\tlet lines: string[] = text.split(\"\\n\");\r\n\r\n\t\t// Do we need to go through the trouble of measuring lines\r\n\t\t//let measure: boolean = true;// (lines.length > 1) || this.wrap;\r\n\r\n\t\tthis._prevStatus = status;\r\n\r\n\t\tthis.textAlign = this.textAlign;\r\n\r\n\t\t// need this to measure\r\n\t\tlet display = this.group.getAttr(\"display\");\r\n\t\tif (display == \"none\") {\r\n\t\t\tthis.group.removeAttr(\"display\");\r\n\t\t}\r\n\r\n\t\t// SVG or HTML?\r\n\t\tif (output === \"svg\") {\r\n\r\n\t\t\t/**\r\n\t\t\t * SVG\r\n\t\t\t */\r\n\r\n\t\t\tthis.element.removeAttr(\"display\");\r\n\r\n\t\t\t// Clear the element\r\n\t\t\tlet group: Group = <Group>this.element;\r\n\r\n\t\t\tthis.resetBBox();\r\n\r\n\t\t\t// Init state variables\r\n\t\t\tlet currentHeight: number = 0;\r\n\t\t\tlet currentFormat: string = \"\";\r\n\r\n\t\t\t// Process each line\r\n\t\t\tfor (let i = 0; i < lines.length; i++) {\r\n\r\n\t\t\t\t// Get line\r\n\t\t\t\tlet line: string = lines[i];\r\n\r\n\t\t\t\t// Check if line is empty\r\n\t\t\t\tif (line == \"\") {\r\n\t\t\t\t\t// It is, let's just update currentHeight and go to the next one\r\n\t\t\t\t\t// If it's the first line, we'll have to use arbirary line height,\r\n\t\t\t\t\t// since there's nothing to measure. For subsequent lines we can take\r\n\t\t\t\t\t// previous line's height\r\n\t\t\t\t\tlet tempElement = this.getSVGLineElement(\"\", 0);\r\n\t\t\t\t\ttempElement.add(\r\n\t\t\t\t\t\tthis.getSvgElement(\r\n\t\t\t\t\t\t\t\".\",\r\n\t\t\t\t\t\t\tgetTextFormatter().translateStyleShortcuts(currentFormat)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tgroup.add(tempElement);\r\n\t\t\t\t\tlet offset = Math.ceil(tempElement.getBBox().height);\r\n\t\t\t\t\tif (offset > 0) {\r\n\t\t\t\t\t\tcurrentHeight += offset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgroup.removeElement(tempElement);\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Chunk up the line and process each chunk\r\n\t\t\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(line);\r\n\t\t\t\tlet currentLineHeight: number = 0;\r\n\t\t\t\tlet firstChunk: boolean = true;\r\n\t\t\t\tlet skipTextChunks: boolean = false;\r\n\r\n\t\t\t\t// Create line element or grab it from cache\r\n\t\t\t\tlet lineInfo: ITextLineInfo;\r\n\t\t\t\tif (lineInfo = this.getLineInfo(i)) {\r\n\t\t\t\t\t// Empty line\r\n\t\t\t\t\tlineInfo.element.textContent = \"\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Init new line info\r\n\t\t\t\t\tlineInfo = {\r\n\t\t\t\t\t\t\"element\": this.getSVGLineElement(\"\", 0),\r\n\t\t\t\t\t\t\"complex\": false\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Create the line element\r\n\t\t\t\t\t//lineInfo.element = this.getSVGLineElement(\"\", 0);\r\n\t\t\t\t\t//lineElement = this.getSVGLineElement(\"\", 0);\r\n\t\t\t\t\tgroup.add(lineInfo.element);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlineInfo.element.removeAttr(\"display\");\r\n\t\t\t\tlineInfo.element.removeChildren(); // memory leak without this\r\n\r\n\t\t\t\tif (this.rtl) {\r\n\t\t\t\t\tchunks.reverse();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Process each chunk\r\n\t\t\t\tfor (let x: number = 0; x < chunks.length; x++) {\r\n\r\n\t\t\t\t\t// If there's more than one chunk, means the line is \"complex\"\r\n\t\t\t\t\tif (x) {\r\n\t\t\t\t\t\tlineInfo.complex = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Get chunk\r\n\t\t\t\t\tlet chunk = chunks[x];\r\n\r\n\t\t\t\t\t// Is this chunk format or text?\r\n\t\t\t\t\tif (chunk.type === \"format\") {\r\n\r\n\t\t\t\t\t\t// Log current format, so that we can apply it to multiple lines if\r\n\t\t\t\t\t\t// necessary\r\n\t\t\t\t\t\tcurrentFormat = chunk.text;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// It's text block\r\n\r\n\t\t\t\t\t\t// Need to skip?\r\n\t\t\t\t\t\t// We do this when truncating. We can't just simply go ahead and\r\n\t\t\t\t\t\t// abandon chunk processing as they might have formatting\r\n\t\t\t\t\t\t// instructions in them that are relevant for subsequent lines\r\n\t\t\t\t\t\tif (skipTextChunks) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add chunk to the current element\r\n\t\t\t\t\t\t//lineInfo.element.content += $utils.trim(getTextFormatter().format(currentFormat + chunk.text, output));\r\n\r\n\t\t\t\t\t\tlineInfo.element.add(\r\n\t\t\t\t\t\t\tthis.getSvgElement(\r\n\t\t\t\t\t\t\t\tchunk.text,\r\n\t\t\t\t\t\t\t\tgetTextFormatter().translateStyleShortcuts(currentFormat)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\tlineInfo.bbox = lineInfo.element.getBBox();\r\n\t\t\t\t\t\tlineInfo.bbox.width = Math.ceil(lineInfo.bbox.width);\r\n\r\n\t\t\t\t\t\t// Updated current line height\r\n\t\t\t\t\t\tif (currentLineHeight < lineInfo.bbox.height) {\r\n\t\t\t\t\t\t\tcurrentLineHeight = lineInfo.bbox.height;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Wrapping?\r\n\t\t\t\t\t\tif ((this.wrap || this.truncate) && (lineInfo.bbox.width > maxWidth)) {\r\n\r\n\t\t\t\t\t\t\t// Set oversized\r\n\t\t\t\t\t\t\tthis.isOversized = true;\r\n\r\n\t\t\t\t\t\t\t// Take temporary measurements\r\n\t\t\t\t\t\t\tlet lineText: string = lineInfo.element.textContent;\r\n\t\t\t\t\t\t\tlet avgCharWidth: number = (lineInfo.bbox.width / lineText.length) * .9;\r\n\r\n\t\t\t\t\t\t\t// Calculate average number of symbols / width\r\n\t\t\t\t\t\t\tlet excessChars: number = $math.min(Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);\r\n\r\n\t\t\t\t\t\t\t// Are we truncating or auto-wrapping text?\r\n\t\t\t\t\t\t\tif (this.truncate) {\r\n\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * Processing line truncation\r\n\t\t\t\t\t\t\t\t * With the addition of each text chunk we measure if current\r\n\t\t\t\t\t\t\t\t * line does not exceed maxWidth. If it does, we will stop\r\n\t\t\t\t\t\t\t\t * addition of further chunks as well as try to truncate\r\n\t\t\t\t\t\t\t\t * current or any number of previous chunks with an added\r\n\t\t\t\t\t\t\t\t * ellipsis\r\n\t\t\t\t\t\t\t\t */\r\n\r\n\t\t\t\t\t\t\t\t// Indicator whether we need to add ellipsis to the current\r\n\t\t\t\t\t\t\t\t// element, even if it fits. This is needed to indicate\r\n\t\t\t\t\t\t\t\t// whether we have already removed some subsequent chunks in\r\n\t\t\t\t\t\t\t\t// which case we need to add ellipsis.\r\n\t\t\t\t\t\t\t\tlet addEllipsis: boolean = false;\r\n\r\n\t\t\t\t\t\t\t\t// Process each child in the temporary line, until the whole\r\n\t\t\t\t\t\t\t\t// line fits, preferably with an ellipsis\r\n\t\t\t\t\t\t\t\t// TODO use iterator instead\r\n\t\t\t\t\t\t\t\tfor (let e = lineInfo.element.children.length - 1; e >= 0; e--) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Get current element\r\n\t\t\t\t\t\t\t\t\tlet element: AMElement = lineInfo.element.children.getIndex(e);\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t// Add ellipsis only if previous chunk was removed in full\r\n\t\t\t\t\t\t\t\t\t// and this chunk already fits\r\n\t\t\t\t\t\t\t\t\t//if (addEllipsis && (bbox.width <= maxWidth)) {\r\n\t\t\t\t\t\t\t\t\tif (addEllipsis && (lineInfo.bbox.width <= maxWidth)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Add ellipsis\r\n\t\t\t\t\t\t\t\t\t\telement.textContent += \" \" + this.ellipsis;\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Measure again (we need to make sure ellipsis fits)\r\n\t\t\t\t\t\t\t\t\t\tlineInfo.bbox = lineInfo.element.getBBox();\r\n\t\t\t\t\t\t\t\t\t\tlineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n\r\n\t\t\t\t\t\t\t\t\t\t// If it fits, we're done here\r\n\t\t\t\t\t\t\t\t\t\t// If it doesn't we continue rolling\r\n\t\t\t\t\t\t\t\t\t\tif (lineInfo.bbox.width <= maxWidth) {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\taddEllipsis = false;\r\n\r\n\t\t\t\t\t\t\t\t\t// Get element text\r\n\t\t\t\t\t\t\t\t\tlet elementText = element.textContent;\r\n\r\n\t\t\t\t\t\t\t\t\t// Calculate average number of symbols / width\r\n\t\t\t\t\t\t\t\t\tlineText = lineInfo.element.textContent;\r\n\t\t\t\t\t\t\t\t\texcessChars = $math.min(Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);\r\n\r\n\t\t\t\t\t\t\t\t\t// Do this until we fit\r\n\t\t\t\t\t\t\t\t\twhile ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Calculate max available chars\r\n\t\t\t\t\t\t\t\t\t\tlet maxChars: number = $math.max(elementText.length - excessChars - this.ellipsis.length, 1);\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Is there anything left?\r\n\t\t\t\t\t\t\t\t\t\tif (maxChars <= 1) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Nope, let's jump to the previous item\r\n\t\t\t\t\t\t\t\t\t\t\t// Set excess characters to zero so that this loop does\r\n\t\t\t\t\t\t\t\t\t\t\t// not repeat when it over\r\n\t\t\t\t\t\t\t\t\t\t\texcessChars = 0;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Add ellipsis to previous item\r\n\t\t\t\t\t\t\t\t\t\t\t// Subsequent iterations will check if the ellipsis fits\r\n\t\t\t\t\t\t\t\t\t\t\tif (e > 0) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Indicating to add ellipsis to previous item\r\n\t\t\t\t\t\t\t\t\t\t\t\taddEllipsis = true;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Removing this node\r\n\t\t\t\t\t\t\t\t\t\t\t\tlineInfo.element.removeElement(element);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t// If we're on first chunk of text, or we explicitly\r\n\t\t\t\t\t\t\t\t\t\t// enabled word-breaking, we can break mid-word.\r\n\t\t\t\t\t\t\t\t\t\t// Otherwise we break by words.\r\n\t\t\t\t\t\t\t\t\t\tif (e === 0 || !this.fullWords) {\r\n\t\t\t\t\t\t\t\t\t\t\telementText = $utils.truncateWithEllipsis(elementText, maxChars, this.ellipsis, false, this.rtl);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\telementText = $utils.truncateWithEllipsis(elementText, maxChars, this.ellipsis, true, this.rtl);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Set truncated text\r\n\t\t\t\t\t\t\t\t\t\telement.textContent = elementText;\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Measure again\r\n\t\t\t\t\t\t\t\t\t\tlineInfo.bbox = lineInfo.element.getBBox();\r\n\t\t\t\t\t\t\t\t\t\tlineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Increase excess characters count, just in case it still\r\n\t\t\t\t\t\t\t\t\t\t// doesn't fit and we have to go at it again\r\n\t\t\t\t\t\t\t\t\t\texcessChars = Math.ceil(excessChars * 1.1);\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Do not process further chunks\r\n\t\t\t\t\t\t\t\t\tskipTextChunks = true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * Processign auto-wrap\r\n\t\t\t\t\t\t\t\t * In this case we're going to be adding text chunks until\r\n\t\t\t\t\t\t\t\t * they don't fit into current line. Once that happens we will\r\n\t\t\t\t\t\t\t\t * inject the rest of the chunks to the next line\r\n\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t// Get last node added and measure it\r\n\t\t\t\t\t\t\t\tlet lastElement: AMElement = lineInfo.element.lastChild;\r\n\r\n\t\t\t\t\t\t\t\t// Init split lines\r\n\t\t\t\t\t\t\t\tlet splitLines: string[];\r\n\t\t\t\t\t\t\t\twhile ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Calculate max available chars\r\n\t\t\t\t\t\t\t\t\tlet maxChars: number = $math.max(chunk.text.length - excessChars, 1);\r\n\r\n\t\t\t\t\t\t\t\t\t// Don't split the words mid-word if it's not the first chunk\r\n\t\t\t\t\t\t\t\t\t// in the line\r\n\t\t\t\t\t\t\t\t\tif (firstChunk) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Split mid-word if necessary\r\n\t\t\t\t\t\t\t\t\t\tsplitLines = $utils.splitTextByCharCount(chunk.text, maxChars, false, this.rtl);\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Don't split mid-word\r\n\t\t\t\t\t\t\t\t\t\tsplitLines = $utils.splitTextByCharCount(chunk.text, maxChars, true, this.rtl);\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Check if the first word is too long\r\n\t\t\t\t\t\t\t\t\t\tif ((splitLines[0].length > maxChars) || maxChars === 1) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Yes - move the whole chunk to the next line\r\n\t\t\t\t\t\t\t\t\t\t\t// Remove the element we just added\r\n\t\t\t\t\t\t\t\t\t\t\tlineInfo.element.removeElement(lastElement);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Break out of the while on next cycle\r\n\t\t\t\t\t\t\t\t\t\t\texcessChars = 0;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Use the first line to update last item\r\n\t\t\t\t\t\t\t\t\tif (excessChars > 0) {\r\n\t\t\t\t\t\t\t\t\t\tlastElement.textContent = getTextFormatter().cleanUp($utils.trim(splitLines.shift()));\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Measure again, just in case\r\n\t\t\t\t\t\t\t\t\tlineInfo.bbox = lineInfo.element.getBBox();\r\n\t\t\t\t\t\t\t\t\tlineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n\r\n\t\t\t\t\t\t\t\t\t// Increase excess characters count, just in case it still\r\n\t\t\t\t\t\t\t\t\t// doesn't fit and we have to go at it again\r\n\t\t\t\t\t\t\t\t\texcessChars = Math.ceil(excessChars * 1.1);\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Construct the rest of the line\r\n\t\t\t\t\t\t\t\tif (splitLines.length > 0) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet restOfLine: string = \"\";\r\n\r\n\t\t\t\t\t\t\t\t\t// Add leftovers from splitting the current chunk\r\n\t\t\t\t\t\t\t\t\tif ($type.hasValue(splitLines)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (this.rtl) {\r\n\t\t\t\t\t\t\t\t\t\t\trestOfLine += splitLines.join(\"\") + currentFormat;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\trestOfLine += currentFormat + splitLines.join(\"\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Add the rest of the chunks\r\n\t\t\t\t\t\t\t\t\tfor (let c: number = x + 1; c < chunks.length; c++) {\r\n\t\t\t\t\t\t\t\t\t\trestOfLine += chunks[c].text;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Inject the rest of the lines as chunks for subsequent\r\n\t\t\t\t\t\t\t\t\tlines.splice(i + 1, 0, restOfLine);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Skip processing the rest of the chunks\r\n\t\t\t\t\t\t\t\tskipTextChunks = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Let's update the text's bbox with the line's one\r\n\t\t\t\t\t\tif (this.bbox.width < lineInfo.bbox.width) {\r\n\t\t\t\t\t\t\tthis.bbox.width = lineInfo.bbox.width;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// commented to avoid bug (seen on sankey link) where text is incorrectly aligned\r\n\t\t\t\t\t\t//if (this.bbox.x > lineInfo.bbox.x) {\r\n\t\t\t\t\t\t//this.bbox.x = lineInfo.bbox.x; \r\n\t\t\t\t\t\t//}\r\n\r\n\t\t\t\t\t\tthis.bbox.height = currentHeight + currentLineHeight;\r\n\r\n\t\t\t\t\t\t// Position current line\r\n\t\t\t\t\t\tlineInfo.element.attr({\r\n\t\t\t\t\t\t\t\"x\": \"0\",\r\n\t\t\t\t\t\t\t\"y\": currentHeight + currentLineHeight,\r\n\t\t\t\t\t\t\t\"dy\": $math.round((-0.2 * currentLineHeight), 3).toString()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tfirstChunk = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Trim the last item\r\n\t\t\t\tlet lastElement: AMElement = lineInfo.element.lastChild;\r\n\t\t\t\tif (lastElement) {\r\n\t\t\t\t\tlastElement.textContent = this.rtl ?\r\n\t\t\t\t\t\t$utils.ltrim(lastElement.textContent) :\r\n\t\t\t\t\t\t$utils.rtrim(lastElement.textContent);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Increment collective height\r\n\t\t\t\tcurrentHeight += currentLineHeight;\r\n\r\n\t\t\t\t// Save line cache\r\n\t\t\t\tthis.addLineInfo(lineInfo, i);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if maybe we need to hide the whole label if it doesn't fit\r\n\t\t\tif (this.hideOversized && ((this.availableWidth < this.bbox.width) || (this.availableHeight < this.bbox.height))) {\r\n\t\t\t\tthis.element.attr({ display: \"none\" });\r\n\t\t\t\tthis.isOversized = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis._measuredWidth = $math.max(this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);\r\n\t\t\tthis._measuredHeight = $math.max(this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n\r\n\t\t\t// Align the lines\r\n\t\t\tthis.alignSVGText();\r\n\r\n\t\t\tthis.bbox.width = this._measuredWidth;\r\n\t\t\tthis.bbox.height = this._measuredHeight;\r\n\r\n\t\t\tthis.hideUnused(lines.length);\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t/**\r\n\t\t\t * HTML\r\n\t\t\t */\r\n\r\n\t\t\tthis.element.removeAttr(\"display\");\r\n\t\t\tthis.resetBBox();\r\n\r\n\t\t\t// Clear the element\r\n\t\t\tlet group: Group = <Group>this.element;\r\n\t\t\tgroup.disposeChildren();\r\n\r\n\t\t\t// Create a ForeignObject to use as HTML container\r\n\t\t\tlet fo = this.paper.foreignObject();\r\n\t\t\tgroup.add(fo);\r\n\r\n\t\t\t// Set group and foreignObject dimensions\r\n\t\t\tlet width: string = maxWidth > 0 ? (maxWidth).toString() + \"px\" : \"100%\";\r\n\t\t\tlet height: string = maxHeight > 0 ? (maxHeight).toString() + \"px\" : \"100%\";\r\n\t\t\t/*\t\t\tfo.attr({\r\n\t\t\t\t\t\t\twidth: width,\r\n\t\t\t\t\t\t\theight: height\r\n\t\t\t\t\t\t});*/\r\n\r\n\t\t\t// Create line element\r\n\t\t\t//let lineElement: HTMLElement = this.getHTMLLineElement(getTextFormatter().format(this.html, output));\r\n\t\t\tlet lineElement: HTMLElement = this.getHTMLLineElement(text);\r\n\t\t\tfo.node.appendChild(lineElement);\r\n\r\n\t\t\t// Temporarily set to inline-block so we can measure real width and height\r\n\t\t\tlineElement.style.display = \"inline-block\";\r\n\t\t\tlet tmpBBox = lineElement.getBoundingClientRect();\r\n\t\t\tlineElement.style.display = \"block\";\r\n\t\t\tthis.bbox = {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: tmpBBox.width,\r\n\t\t\t\theight: tmpBBox.height\r\n\t\t\t};\r\n\r\n\t\t\t// Set exact dimensions of foreignObject so it is sized exactly as\r\n\t\t\t// the content within\r\n\t\t\tfo.attr({\r\n\t\t\t\twidth: tmpBBox.width,\r\n\t\t\t\theight: tmpBBox.height\r\n\t\t\t});\r\n\r\n\t\t\t// Set measurements and update bbox\r\n\t\t\tthis._measuredWidth = $math.max(this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);\r\n\t\t\tthis._measuredHeight = $math.max(this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n\r\n\t\t\tthis.bbox.width = this._measuredWidth;\r\n\t\t\tthis.bbox.height = this._measuredHeight;\r\n\r\n\t\t\t// Don't let labels bleed out of the alotted area\r\n\t\t\tif (this.truncate) {\r\n\t\t\t\tlineElement.style.overflow = \"hidden\";\r\n\t\t\t}\r\n\r\n\t\t\tif ((tmpBBox.width > maxWidth) || (tmpBBox.height > maxHeight)) {\r\n\t\t\t\tthis.isOversized = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Set applicable styles\r\n\t\tthis.setStyles();\r\n\t\tthis.updateCenter();\r\n\t\tthis.updateBackground();\r\n\r\n\t\tif (display == \"none\") {\r\n\t\t\tthis.group.attr({ display: \"none\" });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Aligns the lines horizontally ant vertically, based on properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic alignSVGText(): void {\r\n\t\t// Get Group\r\n\t\tlet group: Group = <Group>this.element;\r\n\r\n\t\t// Is there anything to align?\r\n\t\tif (!group.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tlet width = this._measuredWidth;\r\n\t\tlet height = this._measuredHeight;\r\n\r\n\t\tlet paddingLeft = this.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.pixelPaddingRight;\r\n\t\tlet paddingTop = this.pixelPaddingTop;\r\n\t\tlet paddingBottom = this.pixelPaddingBottom;\r\n\r\n\t\t// Process each line\r\n\t\t$iter.each(group.children.backwards().iterator(), (element) => {\r\n\t\t\t// Align horizontally\r\n\t\t\t// Since we are using `text-anchor` for horizontal alignment, all we need\r\n\t\t\t// to do here is move the `x` position\r\n\r\n\t\t\telement.attr({ \"text-anchor\": this.textAlign })\r\n\r\n\t\t\tswitch (this.textAlign) {\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\telement.attr({ \"x\": (width / 2).toString() });\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"end\":\r\n\t\t\t\t\tif (this.rtl) {\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\telement.attr({ \"x\": width.toString() });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this.rtl) {\r\n\t\t\t\t\t\telement.attr({ \"x\": width.toString() });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\telement.removeAttr(\"text-anchor\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet y = $type.toNumber(element.getAttr(\"y\"));\r\n\r\n\t\t\tswitch (this.textValign) {\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\telement.attr({ \"y\": (y + (height - this.bbox.height) / 2).toString() });\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\telement.attr({ \"y\": (y + height - this.bbox.height).toString() });\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\telement.attr({ \"y\": y.toString() });\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Produces an SVG line element with formatted text.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}     text    Text to wrap into line\r\n\t * @param  {number}     y       Current line vertical position\r\n\t * @return {AMElement}          A DOM element\r\n\t * @todo Implement HTML support\r\n\t */\r\n\tpublic getSVGLineElement(text: string, y?: number): Group {\r\n\r\n\t\t// Create a <text> node and set text\r\n\t\tlet element: Group = this.paper.addGroup(\"text\");\r\n\t\telement.textContent = text;\r\n\r\n\t\t// Set parameters\r\n\t\telement.attr({\r\n\t\t\t\"x\": \"0\"\r\n\t\t\t//\"alignment-baseline\": \"hanging\",\r\n\t\t\t//\"baseline-shift\": \"-20%\",\r\n\t\t\t//\"text-anchor\": \"center\"\r\n\t\t});\r\n\r\n\t\t// Set `y` position\r\n\t\tif ($type.hasValue(y)) {\r\n\t\t\telement.attr({\r\n\t\t\t\t\"y\": y.toString()\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Don't let labels blled out of the alotted area\r\n\t\tif (this.truncate || this.wrap) {\r\n\t\t\telement.attr({ \"overflow\": \"hidden\" });\r\n\t\t}\r\n\r\n\t\t// Add RTL?\r\n\t\tif (this.rtl) {\r\n\t\t\telement.attr({\r\n\t\t\t\t\"direction\": \"rtl\",\r\n\t\t\t\t\"unicode-bidi\": \"bidi-override\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets cached BBox.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic resetBBox(): void {\r\n\t\tthis.bbox = { x: 0, y: 0, width: 0, height: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns an HTML line element (`<div>`).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}       text  Text to add\r\n\t * @return {HTMLElement}        `<div>` element reference\r\n\t */\r\n\tpublic getHTMLLineElement(text: string): HTMLElement {\r\n\r\n\t\t// Create the <div> element\r\n\t\tlet div: HTMLElement = document.createElement(\"div\");\r\n\t\tdiv.innerHTML = text;\r\n\r\n\t\t// Set text alignment\r\n\t\tswitch (this.textAlign) {\r\n\t\t\tcase \"middle\":\r\n\t\t\t\tdiv.style.textAlign = \"center\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"end\":\r\n\t\t\t\tdiv.style.textAlign = \"right\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Disable or enable wrapping\r\n\t\tif (this.wrap) {\r\n\t\t\tdiv.style.wordWrap = \"break-word\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdiv.style.whiteSpace = \"nowrap\";\r\n\t\t}\r\n\r\n\t\t// Don't let labels bleed out of the alotted area\r\n\t\t// Moved to `draw()` because setting \"hidden\" kills all measuring\r\n\t\t/*if (this.truncate) {\r\n\t\t\tdiv.style.overflow = \"hidden\";\r\n\t\t}*/\r\n\r\n\t\t// Set RTL-related styles\r\n\t\tif (this.rtl) {\r\n\t\t\tdiv.style.direction = \"rtl\";\r\n\t\t\tdiv.style.unicodeBidi = \"bidi-override\";\r\n\t\t}\r\n\r\n\t\t// Translate some of the SVG styles into CSS\r\n\t\tif ($type.hasValue(this.fill)) {\r\n\t\t\tdiv.style.color = this.fill.toString();\r\n\t\t}\r\n\r\n\t\treturn div;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies specific styles to text to make it not selectable, unless it is\r\n\t * explicitly set as `selectable`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Set styles via AMElement\r\n\t */\r\n\tpublic setStyles(): void {\r\n\t\tlet group: Group = <Group>this.element;\r\n\t\tif (!this.selectable || this.draggable || this.resizable || this.swipeable) {\r\n\t\t\tgroup.addStyle({\r\n\t\t\t\t\"webkitUserSelect\": \"none\",\r\n\t\t\t\t\"msUserSelect\": \"none\"\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (this.selectable) {\r\n\t\t\tgroup.removeStyle(\"webkitUserSelect\");\r\n\t\t\tgroup.removeStyle(\"msUserSelect\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused lines\r\n\t */\r\n\tprotected hideUnused(index: number) {\r\n\t\tthis.initLineCache();\r\n\t\tlet lines: ITextLineInfo[] = this.getCache(\"lineInfo\");\r\n\t\tif (lines.length >= index) {\r\n\t\t\tfor (let i = index; i < lines.length; i++) {\r\n\t\t\t\tlet line = lines[i];\r\n\t\t\t\tif (line && line.element) {\r\n\t\t\t\t\tline.element.attr({ \"display\": \"none\" });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An SVG text.\r\n\t *\r\n\t * Please note that setting `html` will override this setting if browser\r\n\t * supports `foreignObject` in SGV, such as most modern browsers excluding\r\n\t * IEs.\r\n\t *\r\n\t * @param {string}  value  SVG Text\r\n\t */\r\n\tpublic set text(value: string) {\r\n\t\t//this.setPropertyValue(\"html\", undefined);\r\n\t\tthis.setPropertyValue(\"text\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} SVG text\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this.getPropertyValue(\"text\");\r\n\t}\r\n\r\n\t/**\r\n\t * Enables or disables autowrapping of text.\r\n\t *\r\n\t * @param {boolean}  value  Auto-wrapping enabled\r\n\t */\r\n\tpublic set wrap(value: boolean) {\r\n\t\tthis.resetBBox();\r\n\t\tthis.setPropertyValue(\"wrap\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Auto-wrap enabled or not\r\n\t */\r\n\tpublic get wrap(): boolean {\r\n\t\treturn this.getPropertyValue(\"wrap\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if text lines need to be truncated if they do not fit, using\r\n\t * configurable `ellipsis` string.\r\n\t *\r\n\t * `truncate` overrides `wrap` if both are set to `true`.\r\n\t *\r\n\t * NOTE: For HTML text, this setting **won't** trigger a parser and actual\r\n\t * line truncation with ellipsis. It will just hide everything that goes\r\n\t * outside the label.\r\n\t *\r\n\t * @param {boolean}  value  trincate text?\r\n\t */\r\n\tpublic set truncate(value: boolean) {\r\n\t\tthis.resetBBox();\r\n\t\tthis.setPropertyValue(\"truncate\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Truncate text?\r\n\t */\r\n\tpublic get truncate(): boolean {\r\n\t\treturn this.getPropertyValue(\"truncate\");\r\n\t}\r\n\r\n\t/**\r\n\t * If `truncate` is enabled, should Label try to break only on full words\r\n\t * (`true`), or whenever needed, including middle of the word. (`false`)\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Truncate on full words?\r\n\t */\r\n\tpublic set fullWords(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWords\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Truncate on full words?\r\n\t */\r\n\tpublic get fullWords(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWords\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ellipsis character to use if `truncate` is enabled.\r\n\t *\r\n\t * @param {string} value Ellipsis string\r\n\t * @default \"...\"\r\n\t */\r\n\tpublic set ellipsis(value: string) {\r\n\t\tthis.setPropertyValue(\"ellipsis\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Ellipsis string\r\n\t */\r\n\tpublic get ellipsis(): string {\r\n\t\treturn this.getPropertyValue(\"ellipsis\");\r\n\t}\r\n\r\n\t/**\r\n\t * Forces the text to be selectable. This setting will be ignored if the\r\n\t * object has some kind of interaction attached to it, such as it is\r\n\t * `draggable`, `swipeable`, `resizable`.\r\n\t *\r\n\t * @param {boolean}  value  Text selectable?\r\n\t * @default false\r\n\t */\r\n\tpublic set selectable(value: boolean) {\r\n\t\tthis.setPropertyValue(\"selectable\", value, true);\r\n\t\tthis.setStyles();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Text selectable?\r\n\t */\r\n\tpublic get selectable(): boolean {\r\n\t\treturn this.getPropertyValue(\"selectable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal text alignment.\r\n\t *\r\n\t * Available choices:\r\n\t * * \"start\"\r\n\t * * \"middle\"\r\n\t * * \"end\"\r\n\t *\r\n\t * @param {TextAlign}  value  Alignment\r\n\t */\r\n\tpublic set textAlign(value: TextAlign) {\r\n\t\tthis.setPropertyValue(\"textAlign\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TextAlign} Alignment\r\n\t */\r\n\tpublic get textAlign(): TextAlign {\r\n\t\treturn this.getPropertyValue(\"textAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical text alignment.\r\n\t *\r\n\t * @ignore Exclude from docs (not used)\r\n\t * @param {TextValign}  value  Alignment\r\n\t * @deprecated\r\n\t */\r\n\tpublic set textValign(value: TextValign) {\r\n\t\tthis.setPropertyValue(\"textValign\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs (not used)\r\n\t * @return {TextValign} Alignment\r\n\t * @deprecated\r\n\t */\r\n\tpublic get textValign(): TextValign {\r\n\t\treturn this.getPropertyValue(\"textValign\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Raw HTML to be used as text.\r\n\t *\r\n\t * NOTE: HTML text is subject to browser support. It relies on browsers\r\n\t * supporting SVG `foreignObject` nodes. Some browsers (read IEs) do not\r\n\t * support it. On those browsers, the text will fall back to basic SVG text,\r\n\t * striping out all HTML markup and styling that goes with it.\r\n\t *\r\n\t * For more information about `foreignObject` and its browser compatibility\r\n\t * refer to [this page](https://developer.mozilla.org/en/docs/Web/SVG/Element/foreignObject#Browser_compatibility).\r\n\t *\r\n\t * @param {string} value HTML text\r\n\t */\r\n\tpublic set html(value: string) {\r\n\t\tthis.setPropertyValue(\"html\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} HTML content\r\n\t */\r\n\tpublic get html(): string {\r\n\t\treturn this.getPropertyValue(\"html\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the whole text should be hidden if it does not fit into\r\n\t * its allotted space.\r\n\t *\r\n\t * @param {boolean}  value  Hide if text does not fit?\r\n\t */\r\n\tpublic set hideOversized(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideOversized\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Hide if text does not fit?\r\n\t */\r\n\tpublic get hideOversized(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideOversized\");\r\n\t}\r\n\r\n\t/**\r\n\t * Override `mesaureElement` so it does not get measure again, because\r\n\t * internal `_bbox` is being updated by measuring routines in Text itself.\r\n\t */\r\n\tpublic measureElement(): void { }\r\n\r\n\t/**\r\n\t * Returns information about a line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}         index  Line index\r\n\t * @return {ITextLineInfo}         Line info object\r\n\t */\r\n\tpublic getLineInfo(index: number): ITextLineInfo {\r\n\t\tthis.initLineCache();\r\n\t\tlet lines = this.getCache(\"lineInfo\");\r\n\t\treturn lines.length > index ? lines[index] : undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a line to line info cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ITextLineInfo}  line     Line info object\r\n\t * @param {number}         index    Insert at specified index\r\n\t */\r\n\tpublic addLineInfo(line: ITextLineInfo, index: number): void {\r\n\t\tthis.initLineCache();\r\n\t\tthis.getCache(\"lineInfo\")[index] = line;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if line cache is initialized and initializes it.\r\n\t */\r\n\tprivate initLineCache(): void {\r\n\t\tif (!this.getCache(\"lineInfo\")) {\r\n\t\t\tthis.setCache(\"lineInfo\", []);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataItem]] to use for populating dynamic sections of the text.\r\n\t *\r\n\t * Check the description for [[Text]] class, for data binding.\r\n\t *\r\n\t * @param {DataItem} dataItem Data item\r\n\t */\r\n\tpublic setDataItem(dataItem: DataItem): void {\r\n\t\tif (this._sourceDataItemEvents) {\r\n\t\t\tthis._sourceDataItemEvents.dispose();\r\n\t\t}\r\n\t\tif (dataItem) {\r\n\t\t\tthis._sourceDataItemEvents = new MultiDisposer([\r\n\t\t\t\tdataItem.events.on(\"valuechanged\", this.invalidate, this),\r\n\t\t\t\tdataItem.events.on(\"workingvaluechanged\", this.invalidate, this),\r\n\t\t\t\tdataItem.events.on(\"calculatedvaluechanged\", this.invalidate, this),\r\n\t\t\t\tdataItem.events.on(\"propertychanged\", this.invalidate, this)\r\n\t\t\t]);\r\n\t\t}\r\n\t\tsuper.setDataItem(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns available horizontal space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Available width (px)\r\n\t */\r\n\tpublic get availableWidth(): number {\r\n\t\treturn $type.hasValue(this.maxWidth) ? this.maxWidth : this.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns available vertical space.\r\n\t *\r\n\t * @return {number} Available height (px)\r\n\t */\r\n\tpublic get availableHeight(): number {\r\n\t\treturn $type.hasValue(this.maxHeight) ? this.maxHeight : this.pixelHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the whole element, causing its redraw.\r\n\t *\r\n\t * Appending `<defs>` section might influence appearance and thus its\r\n\t * dimensions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendDefs() {\r\n\t\tsuper.appendDefs();\r\n\t\tthis.invalidate(); // otherwise getBBOx of text element returns 0 simetimes\r\n\t}\r\n\r\n\t// temp, replacing textFormatter method\r\n\tpublic getSvgElement(text: string, style?: string): AMElement {\r\n\t\tlet element = this.paper.add(\"tspan\");\r\n\t\telement.textContent = text;\r\n\t\tif (style) {\r\n\t\t\telement.node.setAttribute(\"style\", style);\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Label\"] = Label;\r\n"]}