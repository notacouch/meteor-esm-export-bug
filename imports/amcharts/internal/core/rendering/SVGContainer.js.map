{"version":3,"file":"SVGContainer.js","sourceRoot":"","sources":["../../../../../src/.internal/core/rendering/SVGContainer.ts"],"names":[],"mappings":"AAAA;;GAEG;AAUH,OAAO,KAAK,MAAM,MAAM,gBAAgB,CAAC;AACzC,OAAO,KAAK,IAAI,MAAM,cAAc,CAAC;AACrC,OAAO,KAAK,MAAM,MAAM,gBAAgB,CAAC;AAIzC;;;;;GAKG;AAGH;;;;;GAKG;AACH,MAAM,CAAC,IAAM,aAAa,GAAwB,EAAE,CAAC;AAErD;;GAEG;AACH;IAuDC;;;;OAIG;IACH,sBAAY,WAAwB;QA1DpC;;;;;;;WAOG;QACO,cAAS,GAAY,KAAK,CAAC;QA8BrC;;;;;WAKG;QACI,eAAU,GAAY,IAAI,CAAC;QAgBjC,0BAA0B;QAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,2BAA2B;QAC3B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB;;;;WAIG;QACH,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;QAC/B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QACrB,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC5B,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAEtC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,8BAAO,GAAd;QACC,IAAI,KAAK,GAAW,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnD,IAAI,MAAM,GAAW,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC/B,IAAI,SAAS,EAAE;YACd,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,EAAE;gBACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBAErB,IAAG,KAAK,GAAG,CAAC,EAAC;oBACZ,SAAS,CAAC,QAAQ,GAAG,KAAK,CAAC;iBAC3B;gBACD,IAAG,MAAM,GAAG,CAAC,EAAC;oBACb,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC;iBAC7B;gBAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACxC;YAED,IAAG,CAAC,SAAS,CAAC,QAAQ,EAAC;gBACtB,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;aACvB;YACD,IAAG,CAAC,SAAS,CAAC,SAAS,EAAC;gBACvB,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;aACxB;SACD;IACF,CAAC;IAOD,sBAAW,mCAAS;QAKpB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,UAAU,CAAC;QACxB,CAAC;QAfD;;;;WAIG;aACH,UAAqB,SAAoC;YACxD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;;;OAAA;IASD;;;;OAIG;IACI,iCAAU,GAAjB;QACC,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,8BAAO,GAAd;QACC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpB,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACnC;IACF,CAAC;IAEF,mBAAC;AAAD,CAAC,AAxJD,IAwJC","sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n * @type {Array<SVGContainer>}\r\n */\r\nexport const svgContainers: Array<SVGContainer> = [];\r\n\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nexport class SVGContainer implements IDisposer {\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * Width of HTML element.\r\n\t *\r\n\t * @type {Optional<number>}\r\n\t */\r\n\tpublic width: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Height of HTML element.\r\n\t *\r\n\t * @type {Optional<number>}\r\n\t */\r\n\tpublic height: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t *\r\n\t * @type {Optional<Container>}\r\n\t */\r\n\tprotected _container: $type.Optional<Container>;\r\n\r\n\t/**\r\n\t * A parent HTML container that SVG wrapper element is placed in.\r\n\t *\r\n\t * @type {HTMLElement}\r\n\t */\r\n\tpublic htmlElement: HTMLElement;\r\n\r\n\t/**\r\n\t * If this component is in a separate HTML container, `autoResize` means the\r\n\t * module will constantly measure container's size and adopt contents to it.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\tpublic autoResize: Boolean = true;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a wrapper/holder for the SVG element.\r\n\t *\r\n\t * @type {HTMLDivElement}\r\n\t */\r\n\tpublic SVGContainer: HTMLDivElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * * Creates an HTML wrapper for SVG\r\n\t */\r\n\tconstructor(htmlElement: HTMLElement) {\r\n\r\n\t\t// Log parent HTML element\r\n\t\tthis.htmlElement = htmlElement;\r\n\r\n\t\t// Adds to containers array\r\n\t\tsvgContainers.push(this);\r\n\r\n\t\t/**\r\n\t\t * Create child div for the container - it will have svg node\r\n\t\t * It might seem that this container is not necessay, however having it solves\r\n\t\t * a problems with mouse position detection and some other.\r\n\t\t */\r\n\t\tlet svgContainer = document.createElement(\"div\");\r\n\t\tlet style = svgContainer.style;\r\n\t\tstyle.width = \"100%\";\r\n\t\tstyle.height = \"100%\";\r\n\t\tstyle.position = \"relative\";\r\n\t\thtmlElement.appendChild(svgContainer);\r\n\r\n\t\tthis.SVGContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Measures size of parent HTML element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measure(): void {\r\n\t\tlet width: number = $utils.width(this.htmlElement);\r\n\t\tlet height: number = $utils.height(this.htmlElement);\r\n\t\tlet container = this.container;\r\n\t\tif (container) {\r\n\t\t\tif (this.width != width || this.height != height) {\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\t\r\n\t\t\t\tif(width > 0){\r\n\t\t\t\t\tcontainer.maxWidth = width;\r\n\t\t\t\t}\r\n\t\t\t\tif(height > 0){\r\n\t\t\t\t\tcontainer.maxHeight = height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$dom.fixPixelPerfect(this.SVGContainer);\r\n\t\t\t}\r\n\r\n\t\t\tif(!container.maxWidth){\r\n\t\t\t\tcontainer.maxWidth = 0;\r\n\t\t\t}\r\n\t\t\tif(!container.maxHeight){\r\n\t\t\t\tcontainer.maxHeight = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t *\r\n\t * @param {Optional<Container>}  container  Container\r\n\t */\r\n\tpublic set container(container: $type.Optional<Container>) {\r\n\t\tthis._container = container;\r\n\t\tthis.measure();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Optional<Container>} Container\r\n\t */\r\n\tpublic get container(): $type.Optional<Container> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return {boolean} Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this container from SVG container list in system, which\r\n\t * effectively disables size change monitoring for it.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\t$array.remove(svgContainers, this);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]}