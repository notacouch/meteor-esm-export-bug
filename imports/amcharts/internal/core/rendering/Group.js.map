{"version":3,"file":"Group.js","sourceRoot":"","sources":["../../../../../src/.internal/core/rendering/Group.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { List } from \"../utils/List\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nexport class Group extends AMElement {\r\n\r\n\t/**\r\n\t * All child elements contained in the group.\r\n\t *\r\n\t * @type {List<AMElement>}\r\n\t */\r\n\tpublic children: List<AMElement> = new List<AMElement>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {string} elementName Element type (should be \"g\")\r\n\t */\r\n\tconstructor(elementName: string) {\r\n\t\tsuper(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param {AMElement}  element  Element\r\n\t */\r\n\tpublic add(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.children.moveValue(element);\r\n\t\t\tthis.node.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param {AMElement}  element  Element\r\n\t */\r\n\tpublic addToBack(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tlet first = this.node.childNodes[0];\r\n\t\t\tif(first){\r\n\t\t\t\tthis.node.insertBefore(element.node, first);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.node.appendChild(element.node);\r\n\t\t\t}\r\n\t\t\tthis.children.moveValue(element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the `element` from group.\r\n\t *\r\n\t * Please note that this will not dispose the element itself, it will just\r\n\t * remove it from the group.\r\n\t *\r\n\t * @param {AMElement}  element  Element\r\n\t */\r\n\tpublic removeElement(element: AMElement): void {\r\n\t\t// todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n\t\tif (element) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.node.removeChild(element.node);\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.children.removeValue(element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * First element in the group.\r\n\t *\r\n\t * @return {Optional<AMElement>} First element\r\n\t */\r\n\tpublic get firstChild(): $type.Optional<AMElement> {\r\n\t\tif (this.children.length) {\r\n\t\t\treturn this.children.getIndex(0);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Last element in the group.\r\n\t *\r\n\t * @return {Optional<AMElement>} Last element\r\n\t */\r\n\tpublic get lastChild(): $type.Optional<AMElement> {\r\n\t\tlet len: number\r\n\t\tif (len = this.children.length) {\r\n\t\t\treturn this.children.getIndex(len - 1);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Content of the group element.\r\n\t *\r\n\t * Can be used to add a lot of proprietary SVG markup into group.\r\n\t *\r\n\t * @param {string}  value  SVG markup\r\n\t */\r\n\tpublic set content(value: string) {\r\n\t\tthis.node.innerHTML = value;\r\n\t\tthis.populateChildren();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} SVG markup\r\n\t */\r\n\tpublic get content(): string {\r\n\t\treturn this.node.innerHTML;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all children from the group.\r\n\t *\r\n\t * This will note dispose the children. They will remain in memory as\r\n\t * orphans. To automatically remove and dispose children elements use\r\n\t * `disposeChildren()` instead.\r\n\t */\r\n\tpublic removeChildren(): void {\r\n\t\twhile (this.children.length > 0) {\r\n\t\t\tlet child: AMElement = this.children.getIndex(0)!;\r\n\t\t\tif(child.node && child.node.parentNode){\r\n\t\t\t\tchild.node.parentNode.removeChild(child.node);\r\n\t\t\t}\r\n\t\t\tthis.children.removeValue(child);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes and disposes all elements in the group.\r\n\t */\r\n\tpublic disposeChildren() {\r\n\t\t// TODO make this more efficient\r\n\t\twhile (this.children.length > 0) {\r\n\t\t\tlet child: AMElement = this.children.getIndex(0)!;\r\n\t\t\tthis.children.removeValue(child);\r\n\t\t\tchild.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Regenerates internal `children` list out of the actual nodes in DOM.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic populateChildren(): void {\r\n\t\tthis.children.clear();\r\n\t\tfor (let i: number = 0, len: number = this.node.childNodes.length; i < len; i++) {\r\n\t\t\tlet element: SVGSVGElement = <SVGSVGElement>this.node.childNodes[i];\r\n\t\t\tthis.children.push(new AMElement(element));\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]}