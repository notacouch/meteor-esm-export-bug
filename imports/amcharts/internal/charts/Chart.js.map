{"version":3,"file":"Chart.js","sourceRoot":"","sources":["../../../../src/.internal/charts/Chart.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,SAAS,EAAoF,MAAM,mBAAmB,CAAC;AAEhI,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAe,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAC7E,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAE/C,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,KAAK,KAAK,MAAM,wBAAwB,CAAC;AAChD,OAAO,KAAK,KAAK,MAAM,oBAAoB,CAAC;AAE5C;;;;;GAKG;AAEH;;;;GAIG;AACH;IAAmC,yCAAQ;IAS1C;;OAEG;IACH;QAAA,YACC,iBAAO,SAGP;QAFA,KAAI,CAAC,SAAS,GAAG,eAAe,CAAC;QACjC,KAAI,CAAC,UAAU,EAAE,CAAC;;IACnB,CAAC;IAEF,oBAAC;AAAD,CAAC,AAlBD,CAAmC,QAAQ,GAkB1C;;AAiCD;;;;;GAKG;AAEH;;;;;GAKG;AACH;IAA2B,iCAAS;IA8DnC;;OAEG;IACH;QAAA;QAEC,OAAO;QACP,iBAAO,SA0DP;QAzDA,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QAEzB,0BAA0B;QAC1B,IAAM,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC7B,KAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAQ,QAAQ,CAAC,CAAC;QAChD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACpD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/B,+EAA+E;QAC/E,KAAI,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1B,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QAEzB,mBAAmB;QACnB,IAAI,uBAAuB,GAAc,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrE,uBAAuB,CAAC,WAAW,GAAG,KAAK,CAAC;QAC5C,uBAAuB,CAAC,MAAM,GAAG,UAAU,CAAC;QAC5C,uBAAuB,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7C,uBAAuB,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,KAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QAEvD,8EAA8E;QAC9E,IAAI,cAAc,GAAG,uBAAuB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpE,cAAc,CAAC,WAAW,GAAG,KAAK,CAAC;QACnC,cAAc,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QACpC,cAAc,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QACrC,KAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,gGAAgG;QAChG,uBAAuB,CAAC,OAAO,GAAG,KAAK,CAAC;QAExC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;YAChD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;gBAClC,uBAAuB,CAAC,OAAO,GAAG,IAAI,CAAC;YACxC,CAAC,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,wEAAwE;QACxE,8DAA8D;QAC9D,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,KAAK;YACvC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACzB,KAAI,CAAC,2BAA2B,EAAE,CAAC;QACpC,CAAC,EAAE,KAAI,CAAC,CAAC;QACT,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,KAAK;YACtC,KAAI,CAAC,2BAA2B,EAAE,CAAC;QACpC,CAAC,EAAE,KAAI,CAAC,CAAC;QAET,gBAAgB;QAChB,yEAAyE;QACzE,sEAAsE;QACtE,sCAAsC;QACtC,wBAAwB;QACxB,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QAErB,cAAc;QACd,KAAI,CAAC,UAAU,EAAE,CAAC;;IAEnB,CAAC;IAED;;;OAGG;IACO,qCAAqB,GAA/B;QACC,iBAAM,qBAAqB,WAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpD;IACF,CAAC;IAED;;;;OAIG;IACI,oBAAI,GAAX;QACC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,iBAAM,IAAI,WAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACO,yBAAS,GAAnB;QACC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,MAAM,EAAE;YACX,IAAI,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;YAC3D,QAAQ,MAAM,CAAC,QAAQ,EAAE;gBACxB,KAAK,MAAM;oBACV,uBAAuB,CAAC,MAAM,GAAG,YAAY,CAAC;oBAC9C,IAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAChC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;qBACnB;oBACD,iCAAiC;oBACjC,MAAM,CAAC,MAAM,EAAE,CAAC;oBAChB,MAAM;gBAEP,KAAK,OAAO;oBACX,uBAAuB,CAAC,MAAM,GAAG,YAAY,CAAC;oBAC9C,IAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAChC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;qBACnB;oBACD,iCAAiC;oBAEjC,MAAM,CAAC,OAAO,EAAE,CAAC;oBACjB,MAAM;gBAEP,KAAK,KAAK;oBACT,uBAAuB,CAAC,MAAM,GAAG,UAAU,CAAC;oBAC5C,MAAM,CAAC,QAAQ,GAAG,SAAS,CAAC;oBAC5B,MAAM,CAAC,MAAM,EAAE,CAAC;oBAChB,MAAM;gBAEP,KAAK,QAAQ;oBACZ,uBAAuB,CAAC,MAAM,GAAG,UAAU,CAAC;oBAC5C,MAAM,CAAC,QAAQ,GAAG,SAAS,CAAC;oBAC5B,MAAM,CAAC,OAAO,EAAE,CAAC;aAClB;SACD;IACF,CAAC;IAED;;OAEG;IACO,0BAAU,GAApB;QAEC,oEAAoE;QACpE,gCAAgC;IAEjC,CAAC;IAED;;;;;OAKG;IACO,4BAAY,GAAtB,UAAuB,KAAqC;QAC3D,IAAI,KAAK,GAAU,KAAK,CAAC,QAAQ,CAAC;QAClC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC;QAEvB,yEAAyE;QACzE,oBAAoB;QACpB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,2CAA2B,GAAlC;QACC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACvB,IAAI,UAAQ,GAAkB,EAAE,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAC,KAAK;gBACxC,UAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,eAAe,CAAC,EAAE,iBAAiB,EAAE,UAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SAChE;aACI;YACJ,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC3C;IACF,CAAC;IASD,sBAAW,yBAAM;QAIjB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAfD;;;;;WAKG;aACH,UAAkB,MAAc;YAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;;;OAAA;IASD;;;;OAIG;IACO,yBAAS,GAAnB,UAAoB,MAAc;QAAlC,iBAsBC;QArBA,IAAI,IAAI,CAAC,OAAO,IAAI,MAAM,EAAE;YAE3B,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACjC;YAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YAEtB,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC7B,qBAAqB;gBACrB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC;gBAC7C,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,iBAAiB,EAAE,UAAC,KAAK;oBACzC,IAAI,KAAK,CAAC,QAAQ,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,IAAI,OAAO,EAAE;wBAC9D,KAAI,CAAC,SAAS,EAAE,CAAC;qBACjB;gBACF,CAAC,CAAC,CAAA;aACF;YAED,IAAI,CAAC,UAAU,EAAE,CAAC;SAClB;IACF,CAAC;IAED;;;;;OAKG;IACI,6BAAa,GAApB,UAAqB,MAAiC;QAErD,IAAI,MAAM,EAAE;YAEX,gBAAgB;YAChB,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACzE,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;aAC9B;SAED;QAED,iBAAM,aAAa,YAAC,MAAM,CAAC,CAAC;IAE7B,CAAC;IAEF,YAAC;AAAD,CAAC,AAlTD,CAA2B,SAAS,GAkTnC","sourcesContent":["/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../core/Sprite\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChartProperties}\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t *\r\n\t * @type {List<Label>}\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t * @type {Legend}\r\n\t */\r\n\tprotected _legend: Legend;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\t// hides everything on first frame and shows only on second. helps to avoid technical flickering\r\n\t\tchartAndLegendContainer.visible = false;\r\n\r\n\t\tchartAndLegendContainer.events.once(\"validated\", () => {\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tchartAndLegendContainer.visible = true;\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tif(!$type.isNumber(legend.width)){\r\n\t\t\t\t\t\tlegend.width = 200;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//legend.maxWidth = legend.width;\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tif(!$type.isNumber(legend.width)){\r\n\t\t\t\t\t\tlegend.width = 200;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//legend.maxWidth = legend.width;\r\n\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.maxWidth = undefined;\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.maxWidth = undefined;\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param  {IListEvents<Label>[\"inserted\"]}  event  An event object which is triggered when inserting into titles list\r\n\t * @return {Label}                               Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param {Legend} Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Legend} Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param {Legend}  legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend != legend) {\r\n\r\n\t\t\tif (this._legend) {\r\n\t\t\t\tthis.removeDispose(this._legend);\r\n\t\t\t}\r\n\r\n\t\t\tthis._legend = legend;\r\n\r\n\t\t\tif (legend) {\r\n\t\t\t\tthis._disposers.push(legend);\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\t\t\t\tlegend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\" || event.property == \"width\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n"]}